#!/bin/bash

external="${EXTERNAL_DRIVE}"
mountpoint="${EXTERNAL_MOUNT}"
config=${D}1
user=`whoami`
branch=`git rev-parse --abbrev-ref HEAD`

echo
echo "-------------------------------------"
echo " Start jc://remote/${REMOTE_CURRENT_STAGE}/"
echo "-------------------------------------"

if [ ${D}user != "root" ]; then 
  echo
  echo "Please run as root!"
  exit 0
fi

if [ ! test -f "${DOCKERCOMPOSE_DIR}/docker-compose" ]; then
  echo "Check the location of your docker-compose file in the configuration!"
  echo "The file/path '${DOCKERCOMPOSE_DIR}/docker-compose' doesn't exist. "
  exit 0
fi


if [ ! ${D}config ]; then
  echo
  echo "Press key - your options:"
  echo " 'q' - exit"
  echo " 's' - start"
  echo " 'r' - restart"
  echo " 'i' - install sample configuration"
  echo " 'u' - update from github (${branch})"
  echo " 'v' - update from github (${branch}) and rebuild container"
  echo " 'c' - clean docker (stopped container / dangling images)"
  echo " 'd' - clean docker (system incl. build cache)"
  count=0
  while : ; do
    read -n 1 k <&1
    if [[ ${D}k = q ]] ; then
       printf "\n... quitting the program.\n"
       exit 0
    elif [[ ${D}k = s ]] ; then
       config="start"
       printf "\n... starting (via docker-compose).\n"
       break
    elif [[ ${D}k = r ]] ; then
       config="restart"
       printf "\n... restarting.\n"
       break
    elif [[ ${D}k = u ]] ; then
       config="update"
       printf "\n... update from Github.\n"
       break
    elif [[ ${D}k = i ]] ; then
       config="install"
       printf "\n... install sample configuration.\n"
       break
    elif [[ ${D}k = v ]] ; then
       config="rebuild"
       printf "\n... update from Github and rebuild docker container.\n"
       break
    elif [[ ${D}k = c ]] ; then
       config="prune"
       printf "\n... cleanup docker containers and images.\n"
       break
    elif [[ ${D}k = d ]] ; then
       config="prune2"
       printf "\n... cleanup docker system.\n"
       break
    else
       ((count=${D}count+1))
       printf "\nIterate for $count times\n"
       echo "Press 'q' to exit"
    fi
  done
fi

if [ ${D}config == "start" ]; then
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml up -d

elif [ ${D}config == "restart" ]; then
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml restart
    
elif [ ${D}config == "install" ]; then
    cd data/_sample
    ./install-config
    cd ../..
    
elif [ ${D}config == "update" ]; then

    echo "Change dir"
    cd ${REMOTE_DIR}
    
    echo "Stop docker"
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml stop
    
    echo "Update REMOTE from repository"
    git stash
    git pull
    
    echo "Update MODULES from repository"
    git submodule update --init --recursive
    
    echo "Create new configuration"
    cd ${REMOTE_DIR}
    cd config/
    ./create ${REMOTE_CURRENT_STAGE}
    cd ..
    
    echo "Restart docker"
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml up -d

elif [ ${D}config == "rebuild" ]; then

    echo "Change dir"
    cd ${REMOTE_DIR}
    
    echo "Stop docker"
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml stop
    
    echo "Update REMOTE from repository"
    git stash
    git pull
    
    echo "Update MODULES from repository"
    git submodule update --init --recursive
    
    echo "Create new configuration"
    cd ${REMOTE_DIR}
    cd config/
    ./create ${REMOTE_CURRENT_STAGE}
    cd ..
    
    echo "Rebuild docker container"
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml rebuild
    
    echo "Restart docker"
    ${DOCKERCOMPOSE_DIR}/docker-compose -f ${REMOTE_DIR}/docker-compose.yml up -d

elif [ ${D}config == "prune" ]; then

   docker image prune
   docker container prune

elif [ ${D}config == "prune2" ]; then

   docker system prune

else
    echo "not found."
fi

echo
echo "Done."

